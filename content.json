{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/08/14/cl7lko9q80001xou73ur4ewff/"},{"title":"测试标题","text":"二级标题1$ hexo new &quot;My New Post&quot; 内容1内容1","link":"/2022/08/14/cl7lko9qd0003xou7011674yq/"}],"tags":[{"name":"PS3","slug":"PS3","link":"/tags/PS3/"},{"name":"Games","slug":"Games","link":"/tags/Games/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"TS","slug":"TS","link":"/tags/TS/"}],"categories":[{"name":"Diary","slug":"Diary","link":"/categories/Diary/"},{"name":"测试分类","slug":"测试分类","link":"/categories/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB/"}],"pages":[{"title":"","text":"body { display: flex; margin: 0; align-items: center; justify-content: center; height: 100vh; } canvas { width: 98vmin; height: 98vmin; }","link":"/about/css/style.css"},{"title":"","text":"console.clear(); // Get the canvas element from the DOM const canvas = document.querySelector('#scene'); canvas.width = canvas.clientWidth; canvas.height = canvas.clientHeight; // Store the 2D context const ctx = canvas.getContext('2d'); if (window.devicePixelRatio > 1) { canvas.width = canvas.clientWidth * 2; canvas.height = canvas.clientHeight * 2; ctx.scale(2, 2); } ctx.rotate(Math.PI*2) /* ====================== */ /* ====== VARIABLES ===== */ /* ====================== */ let width = canvas.clientWidth; // Width of the canvas let height = canvas.clientHeight; // Height of the canvas let rotation = 0; // Rotation of the globe let dots = []; // Every dots in an array /* ====================== */ /* ====== CONSTANTS ===== */ /* ====================== */ /* Some of those constants may change if the user resizes their screen but I still strongly believe they belong to the Constants part of the variables */ const DOTS_AMOUNT = 1000; // Amount of dots on the screen const DOT_RADIUS = 4; // Radius of the dots let GLOBE_RADIUS = width * 0.7; // Radius of the globe let GLOBE_CENTER_Z = -GLOBE_RADIUS; // Z value of the globe center let PROJECTION_CENTER_X = width / 2; // X center of the canvas HTML let PROJECTION_CENTER_Y = height / 2; // Y center of the canvas HTML let FIELD_OF_VIEW = width * 0.8; class Dot { constructor(x, y, z) { this.x = x; this.y = y; this.z = z; this.xProject = 0; this.yProject = 0; this.sizeProjection = 0; } // Do some math to project the 3D position into the 2D canvas project(sin, cos) { const rotX = cos * this.x + sin * (this.z - GLOBE_CENTER_Z); const rotZ = -sin * this.x + cos * (this.z - GLOBE_CENTER_Z) + GLOBE_CENTER_Z; this.sizeProjection = FIELD_OF_VIEW / (FIELD_OF_VIEW - rotZ); this.xProject = (rotX * this.sizeProjection) + PROJECTION_CENTER_X; this.yProject = (this.y * this.sizeProjection) + PROJECTION_CENTER_Y; } // Draw the dot on the canvas draw(sin, cos) { this.project(sin, cos); // ctx.fillRect(this.xProject - DOT_RADIUS, this.yProject - DOT_RADIUS, DOT_RADIUS * 2 * this.sizeProjection, DOT_RADIUS * 2 * this.sizeProjection); ctx.beginPath(); ctx.arc(this.xProject, this.yProject, DOT_RADIUS * this.sizeProjection, 0, Math.PI * 2); ctx.closePath(); ctx.fill(); } } function createDots() { // Empty the array of dots dots.length = 0; // Create a new dot based on the amount needed for (let i = 0; i < DOTS_AMOUNT; i++) { const theta = Math.random() * 2 * Math.PI; // Random value between [0, 2PI] const phi = Math.acos((Math.random() * 2) - 1); // Random value between [-1, 1] // Calculate the [x, y, z] coordinates of the dot along the globe const x = GLOBE_RADIUS * Math.sin(phi) * Math.cos(theta); const y = GLOBE_RADIUS * Math.sin(phi) * Math.sin(theta); const z = (GLOBE_RADIUS * Math.cos(phi)) + GLOBE_CENTER_Z; dots.push(new Dot(x, y, z)); } } /* ====================== */ /* ======== RENDER ====== */ /* ====================== */ function render(a) { console.log(\"地球旋转\",a) // Clear the scene ctx.clearRect(0, 0, width, height); // 旋转速度 // Increase the globe rotation rotation = a * 0.0003; const sineRotation = Math.sin(rotation); // Sine of the rotation const cosineRotation = Math.cos(rotation); // Cosine of the rotation // Loop through the dots array and draw every dot for (var i = 0; i < dots.length; i++) { dots[i].draw(sineRotation, cosineRotation); } window.requestAnimationFrame(render); } // Function called after the user resized its screen function afterResize () { width = canvas.offsetWidth; height = canvas.offsetHeight; if (window.devicePixelRatio > 1) { canvas.width = canvas.clientWidth * 2; canvas.height = canvas.clientHeight * 2; ctx.scale(2, 2); } else { canvas.width = width; canvas.height = height; } GLOBE_RADIUS = width * 0.7; GLOBE_CENTER_Z = -GLOBE_RADIUS; PROJECTION_CENTER_X = width / 2; PROJECTION_CENTER_Y = height / 2; FIELD_OF_VIEW = width * 0.8; createDots(); // Reset all dots } // Variable used to store a timeout when user resized its screen let resizeTimeout; // Function called right after user resized its screen function onResize () { // Clear the timeout variable resizeTimeout = window.clearTimeout(resizeTimeout); // Store a new timeout to avoid calling afterResize for every resize event resizeTimeout = window.setTimeout(afterResize, 500); } window.addEventListener('resize', onResize); // 鼠标位置 let mouse = { x: window.innerWidth / 2, y: window.innerHeight / 2 } // 监听 window.addEventListener('mousemove', function (event) { console.log(\"鼠标移动\",event.clientX,event.clientY) // mouse.x = event.clientX; // mouse.y = event.clientY; }) // Populate the dots array with random dots createDots(); // Render the scene window.requestAnimationFrame(render);","link":"/about/js/index.js"}]}